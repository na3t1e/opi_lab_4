<?xml version="1.0" encoding="UTF-8"?>
<project name="opi_lab_3" default="compile" basedir=".">
    <property file="build.properties"/>

    <path id="project.classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${src.dir}" includes="*.java"/>
    </path>
    <!-- Clean the build directory -->
    <target name="clean">
        <delete dir="${build.dir}" />
    </target>

    <!-- Create the build directory structure -->
    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${webapp.dir}" />
    </target>

    <!-- Compile project -->
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar" />
                </fileset>
            </classpath>
            <compilerarg line="-Xlint:unchecked" />
        </javac>
    </target>

    <!-- Build the project and package it into a WAR file -->
    <target name="build" depends="compile">
        <copy todir="${build.dir}/webapp">
            <fileset dir="${webapp.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/classes">
            <fileset dir="${classes.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/lib">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
        </copy>
        <war destfile="${build.dir}/${war.name}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <fileset dir="${build.dir}/webapp">
                <include name="**/*" />
                <exclude name="/WEB-INF/web.xml" />
            </fileset>
        </war>
    </target>

    <!-- Test isInArea function using Junit -->
    <target name="test" depends="build">
        <mkdir dir="${build.dir}/test-classes"/>
        <javac srcdir="${test.dir}" destdir="${build.dir}/test-classes" includeantruntime="false">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar" />
                </fileset>
                <pathelement location="${classes.dir}" />
            </classpath>
            <compilerarg line="-Xlint:unchecked"/>
        </javac>

        <mkdir dir="${build.dir}/test-results"/>
        <junitlauncher haltonfailure="true" printsummary="true">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar" />
                </fileset>
                <pathelement location="${classes.dir}" />
                <pathelement location="${build.dir}/test-classes"/>
            </classpath>
            <testclasses outputdir="${build.dir}/test-results">
                <fileset dir="${build.dir}/test-classes" includes="**/*Test.class"/>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- Generate docs and update MANIFEST.MF with checksums -->
    <target name="doc" depends="build, generate-checksums">
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc sourcepath="${src.dir}" destdir="${build.dir}/javadoc" packagenames="*">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </javadoc>

        <loadfile property="md5" srcFile="${checksums.md5.file}"/>
        <loadfile property="sha1" srcFile="${checksums.sha1.file}"/>

        <manifest file="${build.dir}/webapp/META-INF/MANIFEST.MF" mode="update">
            <attribute name="MD5-Digest" value="${md5}"/>
            <attribute name="SHA1-Digest" value="${sha1}"/>
        </manifest>

        <war destfile="${build.dir}/${war.name}" update="true">
            <fileset dir="${build.dir}/javadoc"/>
        </war>
    </target>

    <!-- Generate MD5 & SHA-1 hash -->
    <target name="generate-checksums">
        <delete file="${checksums.md5.file}" quiet="true"/>
        <delete file="${checksums.sha1.file}" quiet="true"/>

        <checksum algorithm="MD5" fileext=".md5">
            <fileset dir="${build.dir}/webapp"/>
        </checksum>
        <checksum algorithm="SHA1" fileext=".sha1">
            <fileset dir="${build.dir}/webapp"/>
        </checksum>

        <concat destfile="${checksums.md5.file}">
            <fileset dir="${build.dir}/webapp" includes="**/*.md5"/>
        </concat>
        <concat destfile="${checksums.sha1.file}">
            <fileset dir="${build.dir}/webapp" includes="**/*.sha1"/>
        </concat>

        <delete>
            <fileset dir="${build.dir}/webapp" includes="**/*.md5"/>
            <fileset dir="${build.dir}/webapp" includes="**/*.sha1"/>
        </delete>
    </target>

    <!-- Alteernative environment -->
    <target name="env">
    <javac srcdir="${src.dir}" destdir="${classes.dir}"  classpathref="project.classpath" source="${compile.version}"
               includeantruntime="false">
            <compilerarg line="${vm.args}"/>
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="src/main/resources"/>
        </copy>
        <copy file="build/opi_lab_3.war" todir="${copy.dir}"/>
        <exec executable="cmd">
            <arg line="/c start ${env.script}"/>
        </exec>
    </target>
</project>
